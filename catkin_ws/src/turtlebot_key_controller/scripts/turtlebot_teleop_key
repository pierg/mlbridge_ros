#!/usr/bin/env python

# Node:             turtlebot_controller
# Publish to:       cmd_vel
# Subscribe from:   turtlebot_command_key
# Description:      wait for the key on 'turtlebot_command_key', maps it into wheels sleed (Twist object)
#                   and sends it to the turtlebot trough 'cmd_vel'. Event-driven.


import rospy
import time

from geometry_msgs.msg import Twist
from std_msgs.msg import String


import sys, select, termios, tty

moveBindings = {
    'i':(1,0),
    'o':(1,-1),
    'j':(0,1),
    'l':(0,-1),
    'u':(1,1),
    ',':(-1,0),
    '.':(-1,1),
    'm':(-1,-1),
}

speedBindings={
    'q':(1.1,1.1),
    'z':(.9,.9),
    'w':(1.1,1),
    'x':(.9,1),
    'e':(1,1.1),
    'c':(1,.9),
}


speed = .2
turn = 1


x = 0
th = 0
status = 0
count = 0
acc = 0.1
target_speed = 0
target_turn = 0
control_speed = 0
control_turn = 0

sendingCommands = False
currentKey = ''



def controlAndActuateKey(key):

    global pub_to_actuators

    global x
    global th
    global status
    global count
    global acc
    global target_speed
    global target_turn
    global control_speed
    global control_turn
    global speed
    global turn

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)

    print "key = " + str(key)
    if key in moveBindings.keys():
        x = moveBindings[key][0]
        th = moveBindings[key][1]
        count = 0
        print "x = " + str(x)
    elif key in speedBindings.keys():
        speed = speed * speedBindings[key][0]
        turn = turn * speedBindings[key][1]
        count = 0

        print vels(speed,turn)
        if (status == 14):
            print msg
        status = (status + 1) % 15
    elif key == ' ' or key == 'k' :
        x = 0
        th = 0
        control_speed = 0
        control_turn = 0
    else:
        count = count + 1
        if count > 4:
            x = 0
            th = 0
        if (key == '\x03'):
            pass

    target_speed = speed * x
    target_turn = turn * th

    if target_speed > control_speed:
        control_speed = min( target_speed, control_speed + 0.02 )
    elif target_speed < control_speed:
        control_speed = max( target_speed, control_speed - 0.02 )
    else:
        control_speed = target_speed

    if target_turn > control_turn:
        control_turn = min( target_turn, control_turn + 0.1 )
    elif target_turn < control_turn:
        control_turn = max( target_turn, control_turn - 0.1 )
    else:
        control_turn = target_turn

    twist = Twist()
    twist.linear.x = control_speed; twist.linear.y = 0; twist.linear.z = 0
    twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = control_turn

    print "publishing: " + str(twist.linear.x) + " - " + str(twist.angular.z)
    pub_to_actuators.publish(twist)


def keyReceivedFromTopic(data):
    controlAndActuateKey(data.data)


if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('turtlebot_controller')

    pub_to_actuators = rospy.Publisher('~cmd_vel', Twist, queue_size=5)

    rospy.Subscriber('turtlebot_command_key', String, keyReceivedFromTopic)

    try:
        while(1):
            controlAndActuateKey('')
            # time.sleep(0.1)

            # Wait for Quit command from keybord (q) or timwout 0.1s
            tty.setraw(sys.stdin.fileno())
            rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
            key = ''
            if rlist:
                key = sys.stdin.read(1)
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)

            if key == 'q':
                break

    except:
        print "Interrupt"
        pass

    print "Terminating.."
